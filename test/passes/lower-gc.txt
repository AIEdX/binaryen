(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $i32_i32_=>_none (func (param i32 i32)))
 (type $i32_=>_none (func (param i32)))
 (type $type$0 (func))
 (type $i32_i32_i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32 i32 i32)))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (type $type$7 (func (param i64)))
 (type $i32_f64_=>_none (func (param i32 f64)))
 (type $i32_f32_=>_none (func (param i32 f32)))
 (type $i32_i32_=>_f64 (func (param i32 i32) (result f64)))
 (type $i32_i32_=>_f32 (func (param i32 i32) (result f32)))
 (type $i32_i64_=>_none (func (param i32 i64)))
 (type $i32_i32_=>_i64 (func (param i32 i32) (result i64)))
 (type $i32_i32_i32_=>_none (func (param i32 i32 i32)))
 (type $i32_f64_f32_i32_=>_i32 (func (param i32 f64 f32 i32) (result i32)))
 (type $i64_i32_=>_i32 (func (param i64 i32) (result i32)))
 (type $f32_i32_=>_i32 (func (param f32 i32) (result i32)))
 (type $f64_i32_=>_i32 (func (param f64 i32) (result i32)))
 (type $f64_i32_i32_=>_i32 (func (param f64 i32 i32) (result i32)))
 (type $i32_i32_f64_=>_none (func (param i32 i32 f64)))
 (type $i32_i32_i32_=>_f64 (func (param i32 i32 i32) (result f64)))
 (type $i32_i64_i32_=>_i32 (func (param i32 i64 i32) (result i32)))
 (type $i32_i32_i32_i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32 i32 i32 i32)))
 (type $i64_i32_=>_none (func (param i64 i32)))
 (import "module" "func" (func $send-any (param i32)))
 (global $global0 i32 (i32.const 8))
 (global $global1 (mut i32) (i32.const 0))
 (global $global2 (mut i32) (i32.const 0))
 (global $global3 (mut i32) (i32.const 0))
 (global $lowergc-next-malloc (mut i32) (i32.const 316))
 (memory $0 16384 16384)
 (table $original-table 0 funcref)
 (table $lowergc-table 4 4 funcref)
 (elem (table $lowergc-table) (i32.const 0) func $call_ref $call_ref_i64 $ref.func $ref.is)
 (export "ref-eq" (func $20))
 (export "struct-nn" (func $21))
 (export "send-any" (func $22))
 (start $lowergc-start)
 (func $struct-gets (param $ref-i32 i32) (param $ref-i64 i32) (param $ref-f32 i32) (param $ref-f64 i32) (param $ref-ref i32) (param $ref-rtt i32)
  (drop
   (call $StructGet$struct-i32$0
    (local.get $ref-i32)
    (i32.const 0)
   )
  )
  (drop
   (call $StructGet$struct-i64$0
    (local.get $ref-i64)
    (i32.const 0)
   )
  )
  (drop
   (call $StructGet$struct-f32$0
    (local.get $ref-f32)
    (i32.const 0)
   )
  )
  (drop
   (call $StructGet$struct-f64$0
    (local.get $ref-f64)
    (i32.const 0)
   )
  )
  (drop
   (call $StructGet$struct-ref$0
    (local.get $ref-ref)
    (i32.const 0)
   )
  )
  (drop
   (call $StructGet$struct-rtt$0
    (local.get $ref-rtt)
    (i32.const 0)
   )
  )
 )
 (func $struct-sets (param $ref-i32 i32) (param $ref-i64 i32) (param $ref-f32 i32) (param $ref-f64 i32) (param $ref-ref i32) (param $ref-rtt i32)
  (call $StructSet$struct-i32$0
   (local.get $ref-i32)
   (i32.const 0)
  )
  (call $StructSet$struct-i64$0
   (local.get $ref-i64)
   (i64.const 0)
  )
  (call $StructSet$struct-f32$0
   (local.get $ref-f32)
   (f32.const 0)
  )
  (call $StructSet$struct-f64$0
   (local.get $ref-f64)
   (f64.const 0)
  )
  (call $StructSet$struct-ref$0
   (local.get $ref-ref)
   (i32.const 0)
  )
  (call $StructSet$struct-rtt$0
   (local.get $ref-rtt)
   (i32.const 8)
  )
 )
 (func $many-fields (param $ref i32)
  (call $StructSet$many-fields$0
   (local.get $ref)
   (i32.const 1)
  )
  (call $StructSet$many-fields$1
   (local.get $ref)
   (f64.const 3.14159)
  )
  (call $StructSet$many-fields$2
   (local.get $ref)
   (f32.const 2.718280076980591)
  )
 )
 (func $new-struct
  (drop
   (call $StructNew$struct-i32
    (i32.const 42)
    (i32.const 32)
   )
  )
 )
 (func $new-struct-default
  (drop
   (call $StructNewWithDefault$many-fields
    (i32.const 56)
   )
  )
 )
 (func $array-gets (param $ref-bytes i32) (param $ref-doubles i32)
  (drop
   (call $ArrayGet$bytes
    (local.get $ref-bytes)
    (i32.const 7)
    (i32.const 0)
   )
  )
  (drop
   (call $ArrayGet$doubles
    (local.get $ref-doubles)
    (i32.const 7)
    (i32.const 0)
   )
  )
 )
 (func $array-sets (param $ref-bytes i32) (param $ref-doubles i32)
  (call $ArraySet$bytes
   (local.get $ref-bytes)
   (i32.const 7)
   (i32.const 42)
  )
  (call $ArraySet$doubles
   (local.get $ref-doubles)
   (i32.const 7)
   (f64.const 3.14159)
  )
 )
 (func $new-array
  (drop
   (call $ArrayNew$bytes
    (i32.const 42)
    (i32.const 11)
    (i32.const 176)
   )
  )
 )
 (func $new-array-default
  (drop
   (call $ArrayNewWithDefault$doubles
    (i32.const 11)
    (i32.const 128)
   )
  )
 )
 (func $array-len (param $x i32) (result i32)
  (call $ArrayLen$doubles
   (local.get $x)
  )
 )
 (func $rtt.sub
  (drop
   (call $RttSub
    (i32.const 32)
    (i32.const 8)
   )
  )
 )
 (func $ref.as (param $x i32)
  (drop
   (call $RefAsNonNull
    (local.get $x)
   )
  )
  (drop
   (call $RefAsFunc
    (local.get $x)
   )
  )
 )
 (func $ref.is (param $x i32)
  (drop
   (call $RefAsNonNull
    (local.get $x)
   )
  )
  (drop
   (call $RefAsData
    (local.get $x)
   )
  )
 )
 (func $ref.func
  (drop
   (i32.const 300)
  )
  (drop
   (i32.const 300)
  )
  (drop
   (i32.const 308)
  )
 )
 (func $ref.cast (param $x i32)
  (drop
   (call $RefCast
    (local.get $x)
    (i32.const 8)
   )
  )
 )
 (func $ref.test (param $x i32)
  (drop
   (call $RefTest
    (local.get $x)
    (i32.const 8)
   )
  )
 )
 (func $call_indirect (param $x i32) (result i32)
  (call_indirect $original-table (type $i32_=>_i32)
   (local.get $x)
   (i32.const 10)
  )
 )
 (func $call_ref
  (call $CallRef$type$0
   (i32.const 284)
  )
 )
 (func $call_ref_i64 (param $x i64)
  (call $CallRef$type$7
   (i64.const 100)
   (i32.const 292)
  )
 )
 (func $br_on_X (param $x i32)
  (local $y i32)
  (local $z i32)
  (local $temp-func i32)
  (local $temp-data i32)
  (local $temp-i31 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (block $null
   (local.set $z
    (block (result i32)
     (local.set $6
      (local.get $x)
     )
     (br_if $null
      (call $RefIsNull
       (local.get $6)
      )
     )
     (local.get $6)
    )
   )
  )
  (drop
   (block $func (result i32)
    (local.set $y
     (block (result i32)
      (local.set $7
       (local.get $x)
      )
      (br_if $func
       (local.get $7)
       (call $RefIsFunc
        (local.get $7)
       )
      )
     )
    )
    (i32.const 0)
   )
  )
  (drop
   (block $data (result i32)
    (local.set $y
     (block (result i32)
      (local.set $8
       (local.get $x)
      )
      (br_if $data
       (local.get $8)
       (call $RefIsData
        (local.get $8)
       )
      )
     )
    )
    (i32.const 0)
   )
  )
  (drop
   (block $i31 (result i32)
    (local.set $y
     (block (result i32)
      (local.set $9
       (local.get $x)
      )
      (br_if $i31
       (local.get $9)
       (call $RefIsI31
        (local.get $9)
       )
      )
     )
    )
    (i32.const 0)
   )
  )
  (drop
   (block $non-null (result i32)
    (block
     (local.set $10
      (local.get $x)
     )
     (drop
      (br_if $non-null
       (local.get $10)
       (i32.eqz
        (call $RefIsNull
         (local.get $10)
        )
       )
      )
     )
    )
    (unreachable)
   )
  )
  (drop
   (block $non-func (result i32)
    (local.set $temp-func
     (block (result i32)
      (local.set $11
       (local.get $x)
      )
      (br_if $non-func
       (local.get $11)
       (i32.eqz
        (call $RefIsFunc
         (local.get $11)
        )
       )
      )
     )
    )
    (i32.const 0)
   )
  )
  (drop
   (block $non-data (result i32)
    (local.set $temp-data
     (block (result i32)
      (local.set $12
       (local.get $x)
      )
      (br_if $non-data
       (local.get $12)
       (i32.eqz
        (call $RefIsData
         (local.get $12)
        )
       )
      )
     )
    )
    (i32.const 0)
   )
  )
  (drop
   (block $non-i31 (result i32)
    (local.set $temp-i31
     (block (result i32)
      (local.set $13
       (local.get $x)
      )
      (br_if $non-i31
       (local.get $13)
       (i32.eqz
        (call $RefIsI31
         (local.get $13)
        )
       )
      )
     )
    )
    (i32.const 0)
   )
  )
 )
 (func $20 (param $x i32) (param $y i32) (result i32)
  (i32.eq
   (local.get $x)
   (local.get $y)
  )
 )
 (func $21 (param $x i32) (result i32)
  (local.get $x)
 )
 (func $22
  (call $send-any
   (i32.const 0)
  )
 )
 (func $lowergc-start
  (i32.store
   (i32.const 8)
   (i32.const 1)
  )
  (i32.store
   (i32.const 12)
   (i32.const 1)
  )
  (i32.store
   (i32.const 16)
   (i32.const 8)
  )
  (i32.store
   (i32.const 20)
   (i32.const 0)
  )
  (i32.store
   (i32.const 24)
   (i32.const 1)
  )
  (i32.store
   (i32.const 28)
   (i32.const 20)
  )
  (i32.store
   (i32.const 32)
   (i32.const 1)
  )
  (i32.store
   (i32.const 36)
   (i32.const 1)
  )
  (i32.store
   (i32.const 40)
   (i32.const 32)
  )
  (i32.store
   (i32.const 44)
   (i32.const 0)
  )
  (i32.store
   (i32.const 48)
   (i32.const 1)
  )
  (i32.store
   (i32.const 52)
   (i32.const 44)
  )
  (i32.store
   (i32.const 56)
   (i32.const 1)
  )
  (i32.store
   (i32.const 60)
   (i32.const 1)
  )
  (i32.store
   (i32.const 64)
   (i32.const 56)
  )
  (i32.store
   (i32.const 68)
   (i32.const 1)
  )
  (i32.store
   (i32.const 72)
   (i32.const 1)
  )
  (i32.store
   (i32.const 76)
   (i32.const 68)
  )
  (i32.store
   (i32.const 80)
   (i32.const 1)
  )
  (i32.store
   (i32.const 84)
   (i32.const 1)
  )
  (i32.store
   (i32.const 88)
   (i32.const 80)
  )
  (i32.store
   (i32.const 92)
   (i32.const 1)
  )
  (i32.store
   (i32.const 96)
   (i32.const 1)
  )
  (i32.store
   (i32.const 100)
   (i32.const 92)
  )
  (i32.store
   (i32.const 104)
   (i32.const 1)
  )
  (i32.store
   (i32.const 108)
   (i32.const 1)
  )
  (i32.store
   (i32.const 112)
   (i32.const 104)
  )
  (i32.store
   (i32.const 116)
   (i32.const 1)
  )
  (i32.store
   (i32.const 120)
   (i32.const 1)
  )
  (i32.store
   (i32.const 124)
   (i32.const 116)
  )
  (i32.store
   (i32.const 128)
   (i32.const 1)
  )
  (i32.store
   (i32.const 132)
   (i32.const 1)
  )
  (i32.store
   (i32.const 136)
   (i32.const 128)
  )
  (i32.store
   (i32.const 140)
   (i32.const 1)
  )
  (i32.store
   (i32.const 144)
   (i32.const 1)
  )
  (i32.store
   (i32.const 148)
   (i32.const 140)
  )
  (i32.store
   (i32.const 152)
   (i32.const 0)
  )
  (i32.store
   (i32.const 156)
   (i32.const 1)
  )
  (i32.store
   (i32.const 160)
   (i32.const 152)
  )
  (i32.store
   (i32.const 164)
   (i32.const 0)
  )
  (i32.store
   (i32.const 168)
   (i32.const 1)
  )
  (i32.store
   (i32.const 172)
   (i32.const 164)
  )
  (i32.store
   (i32.const 176)
   (i32.const 1)
  )
  (i32.store
   (i32.const 180)
   (i32.const 1)
  )
  (i32.store
   (i32.const 184)
   (i32.const 176)
  )
  (i32.store
   (i32.const 188)
   (i32.const 1)
  )
  (i32.store
   (i32.const 192)
   (i32.const 1)
  )
  (i32.store
   (i32.const 196)
   (i32.const 188)
  )
  (i32.store
   (i32.const 200)
   (i32.const 0)
  )
  (i32.store
   (i32.const 204)
   (i32.const 1)
  )
  (i32.store
   (i32.const 208)
   (i32.const 200)
  )
  (i32.store
   (i32.const 212)
   (i32.const 0)
  )
  (i32.store
   (i32.const 216)
   (i32.const 1)
  )
  (i32.store
   (i32.const 220)
   (i32.const 212)
  )
  (i32.store
   (i32.const 224)
   (i32.const 0)
  )
  (i32.store
   (i32.const 228)
   (i32.const 1)
  )
  (i32.store
   (i32.const 232)
   (i32.const 224)
  )
  (i32.store
   (i32.const 236)
   (i32.const 0)
  )
  (i32.store
   (i32.const 240)
   (i32.const 1)
  )
  (i32.store
   (i32.const 244)
   (i32.const 236)
  )
  (i32.store
   (i32.const 248)
   (i32.const 0)
  )
  (i32.store
   (i32.const 252)
   (i32.const 1)
  )
  (i32.store
   (i32.const 256)
   (i32.const 248)
  )
  (i32.store
   (i32.const 260)
   (i32.const 0)
  )
  (i32.store
   (i32.const 264)
   (i32.const 1)
  )
  (i32.store
   (i32.const 268)
   (i32.const 260)
  )
  (i32.store
   (i32.const 272)
   (i32.const 0)
  )
  (i32.store
   (i32.const 276)
   (i32.const 1)
  )
  (i32.store
   (i32.const 280)
   (i32.const 272)
  )
  (i32.store
   (i32.const 284)
   (i32.const 20)
  )
  (i32.store
   (i32.const 288)
   (i32.const 0)
  )
  (i32.store
   (i32.const 292)
   (i32.const 248)
  )
  (i32.store
   (i32.const 296)
   (i32.const 1)
  )
  (i32.store
   (i32.const 300)
   (i32.const 20)
  )
  (i32.store
   (i32.const 304)
   (i32.const 2)
  )
  (i32.store
   (i32.const 308)
   (i32.const 44)
  )
  (i32.store
   (i32.const 312)
   (i32.const 3)
  )
  (global.set $global1
   (call $RttSub
    (i32.const 32)
    (global.get $global0)
   )
  )
  (global.set $global2
   (call $RttSub
    (i32.const 140)
    (global.get $global1)
   )
  )
  (global.set $global3
   (call $RttSub
    (i32.const 140)
    (global.get $global2)
   )
  )
 )
 (func $StructNewWithDefault$empty (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $malloc
    (i32.const 4)
   )
  )
  (i32.store
   (local.get $1)
   (local.get $0)
  )
  (local.get $1)
 )
 (func $StructNew$empty (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $malloc
    (i32.const 4)
   )
  )
  (i32.store
   (local.get $1)
   (local.get $0)
  )
  (local.get $1)
 )
 (func $CallRef$type$0 (param $0 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $type$0)
    (i32.load offset=4
     (local.get $0)
    )
   )
  )
 )
 (func $StructNewWithDefault$struct-i32 (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $malloc
    (i32.const 8)
   )
  )
  (i32.store
   (local.get $1)
   (local.get $0)
  )
  (call $StructSet$struct-i32$0
   (local.get $1)
   (i32.const 0)
  )
  (local.get $1)
 )
 (func $StructNew$struct-i32 (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (call $malloc
    (i32.const 8)
   )
  )
  (i32.store
   (local.get $2)
   (local.get $1)
  )
  (call $StructSet$struct-i32$0
   (local.get $2)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $StructSet$struct-i32$0 (param $0 i32) (param $1 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.store offset=4
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructGet$struct-i32$0 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.load offset=4
    (local.get $0)
   )
  )
 )
 (func $CallRef$type$1 (param $0 i32) (param $1 i32)
  (if
   (i32.eqz
    (local.get $1)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $i32_=>_none)
    (local.get $0)
    (i32.load offset=4
     (local.get $1)
    )
   )
  )
 )
 (func $StructNewWithDefault$many-fields (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $malloc
    (i32.const 20)
   )
  )
  (i32.store
   (local.get $1)
   (local.get $0)
  )
  (call $StructSet$many-fields$0
   (local.get $1)
   (i32.const 0)
  )
  (call $StructSet$many-fields$1
   (local.get $1)
   (f64.const 0)
  )
  (call $StructSet$many-fields$2
   (local.get $1)
   (f32.const 0)
  )
  (local.get $1)
 )
 (func $StructNew$many-fields (param $0 i32) (param $1 f64) (param $2 f32) (param $3 i32) (result i32)
  (local $4 i32)
  (local.set $4
   (call $malloc
    (i32.const 20)
   )
  )
  (i32.store
   (local.get $4)
   (local.get $3)
  )
  (call $StructSet$many-fields$0
   (local.get $4)
   (local.get $0)
  )
  (call $StructSet$many-fields$1
   (local.get $4)
   (local.get $1)
  )
  (call $StructSet$many-fields$2
   (local.get $4)
   (local.get $2)
  )
  (local.get $4)
 )
 (func $StructSet$many-fields$0 (param $0 i32) (param $1 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.store offset=4
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructSet$many-fields$1 (param $0 i32) (param $1 f64)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f64.store offset=8
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructSet$many-fields$2 (param $0 i32) (param $1 f32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f32.store offset=16
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructGet$many-fields$0 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.load offset=4
    (local.get $0)
   )
  )
 )
 (func $StructGet$many-fields$1 (param $0 i32) (param $1 i32) (result f64)
  (if (result f64)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f64.load offset=8
    (local.get $0)
   )
  )
 )
 (func $StructGet$many-fields$2 (param $0 i32) (param $1 i32) (result f32)
  (if (result f32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f32.load offset=16
    (local.get $0)
   )
  )
 )
 (func $StructNewWithDefault$struct-i64 (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $malloc
    (i32.const 12)
   )
  )
  (i32.store
   (local.get $1)
   (local.get $0)
  )
  (call $StructSet$struct-i64$0
   (local.get $1)
   (i64.const 0)
  )
  (local.get $1)
 )
 (func $StructNew$struct-i64 (param $0 i64) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (call $malloc
    (i32.const 12)
   )
  )
  (i32.store
   (local.get $2)
   (local.get $1)
  )
  (call $StructSet$struct-i64$0
   (local.get $2)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $StructSet$struct-i64$0 (param $0 i32) (param $1 i64)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i64.store offset=4
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructGet$struct-i64$0 (param $0 i32) (param $1 i32) (result i64)
  (if (result i64)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i64.load offset=4
    (local.get $0)
   )
  )
 )
 (func $StructNewWithDefault$struct-f32 (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $malloc
    (i32.const 8)
   )
  )
  (i32.store
   (local.get $1)
   (local.get $0)
  )
  (call $StructSet$struct-f32$0
   (local.get $1)
   (f32.const 0)
  )
  (local.get $1)
 )
 (func $StructNew$struct-f32 (param $0 f32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (call $malloc
    (i32.const 8)
   )
  )
  (i32.store
   (local.get $2)
   (local.get $1)
  )
  (call $StructSet$struct-f32$0
   (local.get $2)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $StructSet$struct-f32$0 (param $0 i32) (param $1 f32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f32.store offset=4
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructGet$struct-f32$0 (param $0 i32) (param $1 i32) (result f32)
  (if (result f32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f32.load offset=4
    (local.get $0)
   )
  )
 )
 (func $StructNewWithDefault$struct-f64 (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $malloc
    (i32.const 12)
   )
  )
  (i32.store
   (local.get $1)
   (local.get $0)
  )
  (call $StructSet$struct-f64$0
   (local.get $1)
   (f64.const 0)
  )
  (local.get $1)
 )
 (func $StructNew$struct-f64 (param $0 f64) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (call $malloc
    (i32.const 12)
   )
  )
  (i32.store
   (local.get $2)
   (local.get $1)
  )
  (call $StructSet$struct-f64$0
   (local.get $2)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $StructSet$struct-f64$0 (param $0 i32) (param $1 f64)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f64.store offset=4
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructGet$struct-f64$0 (param $0 i32) (param $1 i32) (result f64)
  (if (result f64)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f64.load offset=4
    (local.get $0)
   )
  )
 )
 (func $StructNewWithDefault$struct-ref (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $malloc
    (i32.const 8)
   )
  )
  (i32.store
   (local.get $1)
   (local.get $0)
  )
  (call $StructSet$struct-ref$0
   (local.get $1)
   (i32.const 0)
  )
  (local.get $1)
 )
 (func $StructNew$struct-ref (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (call $malloc
    (i32.const 8)
   )
  )
  (i32.store
   (local.get $2)
   (local.get $1)
  )
  (call $StructSet$struct-ref$0
   (local.get $2)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $StructSet$struct-ref$0 (param $0 i32) (param $1 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.store offset=4
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructGet$struct-ref$0 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.load offset=4
    (local.get $0)
   )
  )
 )
 (func $StructNew$struct-rtt (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (call $malloc
    (i32.const 8)
   )
  )
  (i32.store
   (local.get $2)
   (local.get $1)
  )
  (call $StructSet$struct-rtt$0
   (local.get $2)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $StructSet$struct-rtt$0 (param $0 i32) (param $1 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.store offset=4
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructGet$struct-rtt$0 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.load offset=4
    (local.get $0)
   )
  )
 )
 (func $ArrayNewWithDefault$doubles (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (call $malloc
    (i32.add
     (i32.const 8)
     (i32.mul
      (i32.const 8)
      (local.get $0)
     )
    )
   )
  )
  (i32.store offset=4
   (local.get $2)
   (local.get $0)
  )
  (i32.store
   (local.get $2)
   (local.get $1)
  )
  (loop $loop
   (block $block
    (br_if $block
     (i32.eqz
      (local.get $0)
     )
    )
    (call $ArraySet$doubles
     (local.get $2)
     (i32.sub
      (local.get $0)
      (i32.const 1)
     )
     (f64.const 0)
    )
    (local.set $0
     (i32.sub
      (local.get $0)
      (i32.const 1)
     )
    )
    (br $loop)
   )
  )
  (local.get $2)
 )
 (func $ArrayNew$doubles (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local.set $3
   (call $malloc
    (i32.add
     (i32.const 8)
     (i32.mul
      (i32.const 8)
      (local.get $1)
     )
    )
   )
  )
  (i32.store offset=4
   (local.get $3)
   (local.get $1)
  )
  (i32.store
   (local.get $3)
   (local.get $2)
  )
  (loop $loop
   (block $block
    (br_if $block
     (i32.eqz
      (local.get $1)
     )
    )
    (call $ArraySet$doubles
     (local.get $3)
     (i32.sub
      (local.get $1)
      (i32.const 1)
     )
     (local.get $0)
    )
    (local.set $1
     (i32.sub
      (local.get $1)
      (i32.const 1)
     )
    )
    (br $loop)
   )
  )
  (local.get $3)
 )
 (func $ArraySet$doubles (param $0 i32) (param $1 i32) (param $2 f64)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f64.store
    (i32.add
     (i32.add
      (local.get $0)
      (i32.const 8)
     )
     (i32.mul
      (i32.const 8)
      (local.get $1)
     )
    )
    (local.get $2)
   )
  )
 )
 (func $ArrayGet$doubles (param $0 i32) (param $1 i32) (param $2 i32) (result f64)
  (if (result f64)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (f64.load
    (i32.add
     (i32.add
      (local.get $0)
      (i32.const 8)
     )
     (i32.mul
      (i32.const 8)
      (local.get $1)
     )
    )
   )
  )
 )
 (func $ArrayLen$doubles (param $0 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.load offset=4
    (local.get $0)
   )
  )
 )
 (func $StructNewWithDefault$struct-i32-f64 (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (call $malloc
    (i32.const 16)
   )
  )
  (i32.store
   (local.get $1)
   (local.get $0)
  )
  (call $StructSet$struct-i32-f64$0
   (local.get $1)
   (i32.const 0)
  )
  (call $StructSet$struct-i32-f64$1
   (local.get $1)
   (i64.const 0)
  )
  (local.get $1)
 )
 (func $StructNew$struct-i32-f64 (param $0 i32) (param $1 i64) (param $2 i32) (result i32)
  (local $3 i32)
  (local.set $3
   (call $malloc
    (i32.const 16)
   )
  )
  (i32.store
   (local.get $3)
   (local.get $2)
  )
  (call $StructSet$struct-i32-f64$0
   (local.get $3)
   (local.get $0)
  )
  (call $StructSet$struct-i32-f64$1
   (local.get $3)
   (local.get $1)
  )
  (local.get $3)
 )
 (func $StructSet$struct-i32-f64$0 (param $0 i32) (param $1 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.store offset=4
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructSet$struct-i32-f64$1 (param $0 i32) (param $1 i64)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i64.store offset=8
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructGet$struct-i32-f64$0 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.load offset=4
    (local.get $0)
   )
  )
 )
 (func $StructGet$struct-i32-f64$1 (param $0 i32) (param $1 i32) (result i64)
  (if (result i64)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i64.load offset=8
    (local.get $0)
   )
  )
 )
 (func $CallRef$type$2 (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32) (param $6 i32)
  (if
   (i32.eqz
    (local.get $6)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $i32_i32_i32_i32_i32_i32_=>_none)
    (local.get $0)
    (local.get $1)
    (local.get $2)
    (local.get $3)
    (local.get $4)
    (local.get $5)
    (i32.load offset=4
     (local.get $6)
    )
   )
  )
 )
 (func $CallRef$type$3 (param $0 i32) (param $1 i32) (param $2 i32)
  (if
   (i32.eqz
    (local.get $2)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $i32_i32_=>_none)
    (local.get $0)
    (local.get $1)
    (i32.load offset=4
     (local.get $2)
    )
   )
  )
 )
 (func $ArrayNewWithDefault$bytes (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (call $malloc
    (i32.add
     (i32.const 8)
     (i32.mul
      (i32.const 1)
      (local.get $0)
     )
    )
   )
  )
  (i32.store offset=4
   (local.get $2)
   (local.get $0)
  )
  (i32.store
   (local.get $2)
   (local.get $1)
  )
  (loop $loop
   (block $block
    (br_if $block
     (i32.eqz
      (local.get $0)
     )
    )
    (call $ArraySet$bytes
     (local.get $2)
     (i32.sub
      (local.get $0)
      (i32.const 1)
     )
     (i32.const 0)
    )
    (local.set $0
     (i32.sub
      (local.get $0)
      (i32.const 1)
     )
    )
    (br $loop)
   )
  )
  (local.get $2)
 )
 (func $ArrayNew$bytes (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local.set $3
   (call $malloc
    (i32.add
     (i32.const 8)
     (i32.mul
      (i32.const 1)
      (local.get $1)
     )
    )
   )
  )
  (i32.store offset=4
   (local.get $3)
   (local.get $1)
  )
  (i32.store
   (local.get $3)
   (local.get $2)
  )
  (loop $loop
   (block $block
    (br_if $block
     (i32.eqz
      (local.get $1)
     )
    )
    (call $ArraySet$bytes
     (local.get $3)
     (i32.sub
      (local.get $1)
      (i32.const 1)
     )
     (local.get $0)
    )
    (local.set $1
     (i32.sub
      (local.get $1)
      (i32.const 1)
     )
    )
    (br $loop)
   )
  )
  (local.get $3)
 )
 (func $ArraySet$bytes (param $0 i32) (param $1 i32) (param $2 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.store8
    (i32.add
     (i32.add
      (local.get $0)
      (i32.const 8)
     )
     (i32.mul
      (i32.const 1)
      (local.get $1)
     )
    )
    (local.get $2)
   )
  )
 )
 (func $ArrayGet$bytes (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (if (result i32)
    (i32.eqz
     (local.get $2)
    )
    (i32.load8_u
     (i32.add
      (i32.add
       (local.get $0)
       (i32.const 8)
      )
      (i32.mul
       (i32.const 1)
       (local.get $1)
      )
     )
    )
    (i32.load8_s
     (i32.add
      (i32.add
       (local.get $0)
       (i32.const 8)
      )
      (i32.mul
       (i32.const 1)
       (local.get $1)
      )
     )
    )
   )
  )
 )
 (func $ArrayLen$bytes (param $0 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.load offset=4
    (local.get $0)
   )
  )
 )
 (func $StructNew$struct-nn (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (call $malloc
    (i32.const 8)
   )
  )
  (i32.store
   (local.get $2)
   (local.get $1)
  )
  (call $StructSet$struct-nn$0
   (local.get $2)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $StructSet$struct-nn$0 (param $0 i32) (param $1 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.store offset=4
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $StructGet$struct-nn$0 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
   (i32.load offset=4
    (local.get $0)
   )
  )
 )
 (func $CallRef$type$4 (param $0 i32) (param $1 i32)
  (if
   (i32.eqz
    (local.get $1)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $i32_=>_none)
    (local.get $0)
    (i32.load offset=4
     (local.get $1)
    )
   )
  )
 )
 (func $CallRef$type$5 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $1)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $i32_=>_i32)
    (local.get $0)
    (i32.load offset=4
     (local.get $1)
    )
   )
  )
 )
 (func $CallRef$type$6 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $1)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $i32_=>_i32)
    (local.get $0)
    (i32.load offset=4
     (local.get $1)
    )
   )
  )
 )
 (func $CallRef$any-any (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $1)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $i32_=>_i32)
    (local.get $0)
    (i32.load offset=4
     (local.get $1)
    )
   )
  )
 )
 (func $CallRef$type$7 (param $0 i64) (param $1 i32)
  (if
   (i32.eqz
    (local.get $1)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $type$7)
    (local.get $0)
    (i32.load offset=4
     (local.get $1)
    )
   )
  )
 )
 (func $CallRef$type$8 (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $2)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $i32_i32_=>_i32)
    (local.get $0)
    (local.get $1)
    (i32.load offset=4
     (local.get $2)
    )
   )
  )
 )
 (func $CallRef$type$9 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.eqz
    (local.get $1)
   )
   (unreachable)
   (call_indirect $lowergc-table (type $i32_=>_i32)
    (local.get $0)
    (i32.load offset=4
     (local.get $1)
    )
   )
  )
 )
 (func $RefAsNonNull (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefAsFunc (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 0)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefAsData (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 1)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefAsI31 (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 2)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefIsNull (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 1)
   )
  )
  (i32.const 0)
 )
 (func $RefIsFunc (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 0)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 1)
 )
 (func $RefIsData (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 1)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 1)
 )
 (func $RefIsI31 (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 2)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 1)
 )
 (func $RefTest (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (local.set $2
   (i32.load
    (local.get $0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (local.get $1)
    )
    (i32.load
     (local.get $2)
    )
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.gt_u
    (i32.load offset=4
     (local.get $1)
    )
    (i32.load offset=4
     (local.get $2)
    )
   )
   (return
    (i32.const 0)
   )
  )
  (local.set $3
   (i32.load offset=4
    (local.get $1)
   )
  )
  (loop $loop
   (if
    (i32.ne
     (i32.load offset=8
      (local.get $1)
     )
     (i32.load offset=8
      (local.get $2)
     )
    )
    (return
     (i32.const 0)
    )
   )
   (local.set $1
    (i32.add
     (local.get $1)
     (i32.const 4)
    )
   )
   (local.set $2
    (i32.add
     (local.get $2)
     (i32.const 4)
    )
   )
   (local.set $3
    (i32.sub
     (local.get $3)
     (i32.const 1)
    )
   )
   (br_if $loop
    (local.get $3)
   )
   (return
    (i32.const 1)
   )
  )
 )
 (func $RefCast (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.eqz
    (call $RefTest
     (local.get $0)
     (local.get $1)
    )
   )
   (unreachable)
  )
  (return
   (local.get $0)
  )
 )
 (func $RttSub (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local.set $3
   (i32.load offset=4
    (local.get $1)
   )
  )
  (local.set $2
   (call $malloc
    (i32.add
     (i32.mul
      (local.get $3)
      (i32.const 4)
     )
     (i32.const 12)
    )
   )
  )
  (i32.store
   (local.get $2)
   (i32.load
    (local.get $0)
   )
  )
  (i32.store offset=4
   (local.get $2)
   (i32.add
    (local.get $3)
    (i32.const 1)
   )
  )
  (local.set $4
   (local.get $2)
  )
  (loop $loop
   (i32.store offset=8
    (local.get $4)
    (i32.load offset=8
     (local.get $1)
    )
   )
   (local.set $4
    (i32.add
     (local.get $4)
     (i32.const 4)
    )
   )
   (local.set $1
    (i32.add
     (local.get $1)
     (i32.const 4)
    )
   )
   (local.set $3
    (i32.sub
     (local.get $3)
     (i32.const 1)
    )
   )
   (br_if $loop
    (local.get $3)
   )
  )
  (i32.store offset=8
   (local.get $4)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $malloc (param $0 i32) (result i32)
  (global.set $lowergc-next-malloc
   (i32.add
    (global.get $lowergc-next-malloc)
    (local.get $0)
   )
  )
  (if
   (i32.ge_u
    (global.get $lowergc-next-malloc)
    (i32.mul
     (memory.size)
     (i32.const 65536)
    )
   )
   (unreachable)
  )
  (i32.sub
   (global.get $lowergc-next-malloc)
   (local.get $0)
  )
 )
)
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $none_=>_none (func))
 (global $lowergc-next-malloc (mut i32) (i32.const 8))
 (memory $0 16384 16384)
 (table $lowergc-table 0 0 funcref)
 (elem (i32.const 0))
 (start $lowergc-start)
 (func $lowergc-start
 )
 (func $RefAsNonNull (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefAsFunc (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 0)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefAsData (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 1)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefAsI31 (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 2)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefIsNull (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 1)
   )
  )
  (i32.const 0)
 )
 (func $RefIsFunc (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 0)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 1)
 )
 (func $RefIsData (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 1)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 1)
 )
 (func $RefIsI31 (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 2)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 1)
 )
 (func $RefTest (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (local.set $2
   (i32.load
    (local.get $0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (local.get $1)
    )
    (i32.load
     (local.get $2)
    )
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.gt_u
    (i32.load offset=4
     (local.get $1)
    )
    (i32.load offset=4
     (local.get $2)
    )
   )
   (return
    (i32.const 0)
   )
  )
  (local.set $3
   (i32.load offset=4
    (local.get $1)
   )
  )
  (loop $loop
   (if
    (i32.ne
     (i32.load offset=8
      (local.get $1)
     )
     (i32.load offset=8
      (local.get $2)
     )
    )
    (return
     (i32.const 0)
    )
   )
   (local.set $1
    (i32.add
     (local.get $1)
     (i32.const 4)
    )
   )
   (local.set $2
    (i32.add
     (local.get $2)
     (i32.const 4)
    )
   )
   (local.set $3
    (i32.sub
     (local.get $3)
     (i32.const 1)
    )
   )
   (br_if $loop
    (local.get $3)
   )
   (return
    (i32.const 1)
   )
  )
 )
 (func $RefCast (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.eqz
    (call $RefTest
     (local.get $0)
     (local.get $1)
    )
   )
   (unreachable)
  )
  (return
   (local.get $0)
  )
 )
 (func $RttSub (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local.set $3
   (i32.load offset=4
    (local.get $1)
   )
  )
  (local.set $2
   (call $malloc
    (i32.add
     (i32.mul
      (local.get $3)
      (i32.const 4)
     )
     (i32.const 12)
    )
   )
  )
  (i32.store
   (local.get $2)
   (i32.load
    (local.get $0)
   )
  )
  (i32.store offset=4
   (local.get $2)
   (i32.add
    (local.get $3)
    (i32.const 1)
   )
  )
  (local.set $4
   (local.get $2)
  )
  (loop $loop
   (i32.store offset=8
    (local.get $4)
    (i32.load offset=8
     (local.get $1)
    )
   )
   (local.set $4
    (i32.add
     (local.get $4)
     (i32.const 4)
    )
   )
   (local.set $1
    (i32.add
     (local.get $1)
     (i32.const 4)
    )
   )
   (local.set $3
    (i32.sub
     (local.get $3)
     (i32.const 1)
    )
   )
   (br_if $loop
    (local.get $3)
   )
  )
  (i32.store offset=8
   (local.get $4)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $malloc (param $0 i32) (result i32)
  (global.set $lowergc-next-malloc
   (i32.add
    (global.get $lowergc-next-malloc)
    (local.get $0)
   )
  )
  (if
   (i32.ge_u
    (global.get $lowergc-next-malloc)
    (i32.mul
     (memory.size)
     (i32.const 65536)
    )
   )
   (unreachable)
  )
  (i32.sub
   (global.get $lowergc-next-malloc)
   (local.get $0)
  )
 )
)
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $none_=>_none (func))
 (global $lowergc-next-malloc (mut i32) (i32.const 65536))
 (memory $0 16385 16385)
 (table $lowergc-table 0 0 funcref)
 (elem (i32.const 0))
 (start $lowergc-start)
 (func $lowergc-start
 )
 (func $RefAsNonNull (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefAsFunc (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 0)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefAsData (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 1)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefAsI31 (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (unreachable)
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 2)
   )
   (unreachable)
  )
  (local.get $0)
 )
 (func $RefIsNull (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 1)
   )
  )
  (i32.const 0)
 )
 (func $RefIsFunc (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 0)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 1)
 )
 (func $RefIsData (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 1)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 1)
 )
 (func $RefIsI31 (param $0 i32) (result i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (i32.load
      (local.get $0)
     )
    )
    (i32.const 2)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 1)
 )
 (func $RefTest (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (local.set $2
   (i32.load
    (local.get $0)
   )
  )
  (if
   (i32.ne
    (i32.load
     (local.get $1)
    )
    (i32.load
     (local.get $2)
    )
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.gt_u
    (i32.load offset=4
     (local.get $1)
    )
    (i32.load offset=4
     (local.get $2)
    )
   )
   (return
    (i32.const 0)
   )
  )
  (local.set $3
   (i32.load offset=4
    (local.get $1)
   )
  )
  (loop $loop
   (if
    (i32.ne
     (i32.load offset=8
      (local.get $1)
     )
     (i32.load offset=8
      (local.get $2)
     )
    )
    (return
     (i32.const 0)
    )
   )
   (local.set $1
    (i32.add
     (local.get $1)
     (i32.const 4)
    )
   )
   (local.set $2
    (i32.add
     (local.get $2)
     (i32.const 4)
    )
   )
   (local.set $3
    (i32.sub
     (local.get $3)
     (i32.const 1)
    )
   )
   (br_if $loop
    (local.get $3)
   )
   (return
    (i32.const 1)
   )
  )
 )
 (func $RefCast (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (if
   (i32.eqz
    (local.get $0)
   )
   (return
    (i32.const 0)
   )
  )
  (if
   (i32.eqz
    (call $RefTest
     (local.get $0)
     (local.get $1)
    )
   )
   (unreachable)
  )
  (return
   (local.get $0)
  )
 )
 (func $RttSub (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local.set $3
   (i32.load offset=4
    (local.get $1)
   )
  )
  (local.set $2
   (call $malloc
    (i32.add
     (i32.mul
      (local.get $3)
      (i32.const 4)
     )
     (i32.const 12)
    )
   )
  )
  (i32.store
   (local.get $2)
   (i32.load
    (local.get $0)
   )
  )
  (i32.store offset=4
   (local.get $2)
   (i32.add
    (local.get $3)
    (i32.const 1)
   )
  )
  (local.set $4
   (local.get $2)
  )
  (loop $loop
   (i32.store offset=8
    (local.get $4)
    (i32.load offset=8
     (local.get $1)
    )
   )
   (local.set $4
    (i32.add
     (local.get $4)
     (i32.const 4)
    )
   )
   (local.set $1
    (i32.add
     (local.get $1)
     (i32.const 4)
    )
   )
   (local.set $3
    (i32.sub
     (local.get $3)
     (i32.const 1)
    )
   )
   (br_if $loop
    (local.get $3)
   )
  )
  (i32.store offset=8
   (local.get $4)
   (local.get $0)
  )
  (local.get $2)
 )
 (func $malloc (param $0 i32) (result i32)
  (global.set $lowergc-next-malloc
   (i32.add
    (global.get $lowergc-next-malloc)
    (local.get $0)
   )
  )
  (if
   (i32.ge_u
    (global.get $lowergc-next-malloc)
    (i32.mul
     (memory.size)
     (i32.const 65536)
    )
   )
   (unreachable)
  )
  (i32.sub
   (global.get $lowergc-next-malloc)
   (local.get $0)
  )
 )
)
