;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; RUN: foreach %s %t wasm-opt --gc-lowering --remove-unused-module-elements -all -S -o - | filecheck %s
;; (--remove-unused-module-elements is useful to avoid clutter in the output
;; here)

(module
 (type $any-any (func (param anyref) (result anyref)))

 (type $empty (struct))
 (type $struct-i32 (struct (mut i32)))
 (type $struct-i64 (struct (mut i64)))
 (type $struct-f32 (struct (field (mut f32))))
 (type $struct-f64 (struct (field (mut f64))))
 (type $struct-ref (struct (field (mut (ref null $empty)))))
 (type $struct-rtt (struct (field (mut (rtt $empty)))))
 (type $struct-nn (struct (field (ref func))))

 (type $struct-i32-f64 (struct (field (mut i32)) (field (mut i64))))

 (type $many-fields (struct (field (mut i32)) (field (mut f64)) (field (mut f32))))

 (type $bytes (array (mut i8)))
 (type $doubles (array (mut f64)))

 ;; CHECK:      (type $type$0 (func))

 ;; CHECK:      (type $i32_=>_i32 (func (param i32) (result i32)))

 ;; CHECK:      (type $i32_=>_none (func (param i32)))

 ;; CHECK:      (type $type$7 (func (param i64)))

 ;; CHECK:      (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))

 ;; CHECK:      (type $i64_i32_=>_none (func (param i64 i32)))

 ;; CHECK:      (import "module" "func" (func $send-any (param i32)))
 (import "module" "func" (func $send-any (param anyref)))

 (table $original-table 0 funcref)

 ;; CHECK:      (global $global0 i32 (i32.const 8))
 (global $global0 (rtt 0 $empty) (rtt.canon $empty))
 ;; CHECK:      (global $global1 (mut i32) (i32.const 0))
 (global $global1 (rtt 1 $struct-i32) (rtt.sub $struct-i32
  (global.get $global0)
 ))
 ;; CHECK:      (global $global2 (mut i32) (i32.const 0))
 (global $global2 (rtt 2 $struct-i32-f64) (rtt.sub $struct-i32-f64
  (global.get $global1)
 ))
 ;; CHECK:      (global $global3 (mut i32) (i32.const 0))
 (global $global3 (rtt 3 $struct-i32-f64) (rtt.sub $struct-i32-f64
  (global.get $global2)
 ))

 (func $struct-gets
  (param $ref-i32 (ref $struct-i32))
  (param $ref-i64 (ref $struct-i64))
  (param $ref-f32 (ref $struct-f32))
  (param $ref-f64 (ref $struct-f64))
  (param $ref-ref (ref $struct-ref))
  (param $ref-rtt (ref $struct-rtt))
  (drop
   (struct.get $struct-i32 0 (local.get $ref-i32))
  )
  (drop
   (struct.get $struct-i64 0 (local.get $ref-i64))
  )
  (drop
   (struct.get $struct-f32 0 (local.get $ref-f32))
  )
  (drop
   (struct.get $struct-f64 0 (local.get $ref-f64))
  )
  (drop
   (struct.get $struct-ref 0 (local.get $ref-ref))
  )
  (drop
   (struct.get $struct-rtt 0 (local.get $ref-rtt))
  )
 )

 (func $struct-sets
  (param $ref-i32 (ref $struct-i32))
  (param $ref-i64 (ref $struct-i64))
  (param $ref-f32 (ref $struct-f32))
  (param $ref-f64 (ref $struct-f64))
  (param $ref-ref (ref $struct-ref))
  (param $ref-rtt (ref $struct-rtt))
  (struct.set $struct-i32 0 (local.get $ref-i32) (i32.const 0))
  (struct.set $struct-i64 0 (local.get $ref-i64) (i64.const 0))
  (struct.set $struct-f32 0 (local.get $ref-f32) (f32.const 0))
  (struct.set $struct-f64 0 (local.get $ref-f64) (f64.const 0))
  (struct.set $struct-ref 0 (local.get $ref-ref) (ref.null $empty))
  (struct.set $struct-rtt 0 (local.get $ref-rtt) (rtt.canon $empty))
 )

 (func $many-fields
  (param $ref (ref $many-fields))
  (struct.set $many-fields 0 (local.get $ref) (i32.const 1))
  (struct.set $many-fields 1 (local.get $ref) (f64.const 3.14159))
  (struct.set $many-fields 2 (local.get $ref) (f32.const 2.71828))
 )

 (func $new-struct
  (drop
   (struct.new_with_rtt $struct-i32
    (i32.const 42)
    (rtt.canon $struct-i32)
   )
  )
 )

 (func $new-struct-default
  (drop
   (struct.new_default_with_rtt $many-fields
    (rtt.canon $many-fields)
   )
  )
 )

 (func $array-gets
  (param $ref-bytes (ref $bytes))
  (param $ref-doubles (ref $doubles))
  (drop
   (array.get $bytes (local.get $ref-bytes) (i32.const 7))
  )
  (drop
   (array.get $doubles (local.get $ref-doubles) (i32.const 7))
  )
 )

 (func $array-sets
  (param $ref-bytes (ref $bytes))
  (param $ref-doubles (ref $doubles))
  (array.set $bytes (local.get $ref-bytes) (i32.const 7) (i32.const 42))
  (array.set $doubles (local.get $ref-doubles) (i32.const 7) (f64.const 3.14159))
 )

 (func $new-array
  (drop
   (array.new_with_rtt $bytes
    (i32.const 42)
    (i32.const 11)
    (rtt.canon $bytes)
   )
  )
 )

 (func $new-array-default
  (drop
   (array.new_default_with_rtt $doubles
    (i32.const 11)
    (rtt.canon $doubles)
   )
  )
 )

 (func $array-len (param $x (ref $doubles)) (result i32)
  (array.len $doubles
   (local.get $x)
  )
 )

 (func $rtt.sub
  (drop
   (rtt.sub $struct-i32
    (rtt.canon $empty)
   )
  )
 )

 (func $ref.as (param $x anyref)
  (drop
   (ref.as_non_null (local.get $x))
  )
  (drop
   (ref.as_func (local.get $x))
  )
 )

 ;; CHECK:      (global $lowergc-next-malloc (mut i32) (i32.const 316))

 ;; CHECK:      (memory $0 16384 16384)

 ;; CHECK:      (table $lowergc-table 4 4 funcref)

 ;; CHECK:      (elem (i32.const 0) $call_ref $call_ref_i64 $ref.func $ref.is)

 ;; CHECK:      (export "ref-eq" (func $20))

 ;; CHECK:      (export "struct-nn" (func $21))

 ;; CHECK:      (export "send-any" (func $22))

 ;; CHECK:      (start $lowergc-start)

 ;; CHECK:      (func $ref.is (param $x i32)
 ;; CHECK-NEXT:  (drop
 ;; CHECK-NEXT:   (call $RefAsNonNull
 ;; CHECK-NEXT:    (local.get $x)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT:  (drop
 ;; CHECK-NEXT:   (call $RefAsData
 ;; CHECK-NEXT:    (local.get $x)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $ref.is (param $x anyref)
  (drop
   (ref.as_non_null (local.get $x))
  )
  (drop
   (ref.as_data (local.get $x))
  )
 )

 ;; CHECK:      (func $ref.func
 ;; CHECK-NEXT:  (drop
 ;; CHECK-NEXT:   (i32.const 300)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT:  (drop
 ;; CHECK-NEXT:   (i32.const 300)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT:  (drop
 ;; CHECK-NEXT:   (i32.const 308)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $ref.func
  (drop
   (ref.func $ref.func)
  )
  ;; the same ref.func should be the same.
  (drop
   (ref.func $ref.func)
  )
  ;; a different one should be different.
  (drop
   (ref.func $ref.is)
  )
 )

 (func $ref.cast (param $x anyref)
  (drop
   (ref.cast (local.get $x) (rtt.canon $empty))
  )
 )

 (func $ref.test (param $x anyref)
  (drop
   (ref.test (local.get $x) (rtt.canon $empty))
  )
 )

 (func $call_indirect (param $x (ref $empty)) (result anyref)
  (call_indirect $original-table (type $any-any)
   (local.get $x)
   (i32.const 10)
  )
 )

 ;; CHECK:      (func $call_ref
 ;; CHECK-NEXT:  (call $CallRef$type$0
 ;; CHECK-NEXT:   (i32.const 284)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $call_ref
  (call_ref
   (ref.func $call_ref)
  )
 )

 ;; CHECK:      (func $call_ref_i64 (param $x i64)
 ;; CHECK-NEXT:  (call $CallRef$type$7
 ;; CHECK-NEXT:   (i64.const 100)
 ;; CHECK-NEXT:   (i32.const 292)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $call_ref_i64 (param $x i64)
  (call_ref
   (i64.const 100)
   (ref.func $call_ref_i64)
  )
 )

 (func $br_on_X (param $x anyref)
  (local $y anyref)
  (local $z (ref null any))
  (local $temp-func (ref null func))
  (local $temp-data (ref null data))
  (local $temp-i31 (ref null i31))
  (block $null
   (local.set $z
    (br_on_null $null (local.get $x))
   )
  )
  (drop
   (block $func (result funcref)
    (local.set $y
     (br_on_func $func (local.get $x))
    )
    (ref.null func)
   )
  )
  (drop
   (block $data (result (ref null data))
    (local.set $y
     (br_on_data $data (local.get $x))
    )
    (ref.null data)
   )
  )
  (drop
   (block $i31 (result (ref null i31))
    (local.set $y
     (br_on_i31 $i31 (local.get $x))
    )
    (ref.null i31)
   )
  )
  (drop
   (block $non-null (result (ref any))
    (br_on_non_null $non-null (local.get $x))
    (unreachable)
   )
  )
  (drop
   (block $non-func (result anyref)
    (local.set $temp-func
     (br_on_non_func $non-func (local.get $x))
    )
    (ref.null any)
   )
  )
  (drop
   (block $non-data (result anyref)
    (local.set $temp-data
     (br_on_non_data $non-data (local.get $x))
    )
    (ref.null any)
   )
  )
  (drop
   (block $non-i31 (result anyref)
    (local.set $temp-i31
     (br_on_non_i31 $non-i31 (local.get $x))
    )
    (ref.null any)
   )
  )
 )
 (func "ref-eq" (param $x eqref) (param $y eqref) (result i32)
  (ref.eq (local.get $x) (local.get $y))
 )
 (func "struct-nn" (param $x (ref $struct-nn)) (result (ref $struct-nn))
  ;; Use this type, so that we emit the support code for it, which tests our
  ;; handling of a struct with a non-nullable field.
  (local.get $x)
 )
 (func "send-any"
  (call $send-any
   (ref.null $empty)
  )
 )
)
;; CHECK:      (func $20 (param $x i32) (param $y i32) (result i32)
;; CHECK-NEXT:  (i32.eq
;; CHECK-NEXT:   (local.get $x)
;; CHECK-NEXT:   (local.get $y)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $21 (param $x i32) (result i32)
;; CHECK-NEXT:  (local.get $x)
;; CHECK-NEXT: )

;; CHECK:      (func $22
;; CHECK-NEXT:  (call $send-any
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $lowergc-start
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 8)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 12)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 16)
;; CHECK-NEXT:   (i32.const 8)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 20)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 24)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 28)
;; CHECK-NEXT:   (i32.const 20)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 32)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 36)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 40)
;; CHECK-NEXT:   (i32.const 32)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 44)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 48)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 52)
;; CHECK-NEXT:   (i32.const 44)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 56)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 60)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 64)
;; CHECK-NEXT:   (i32.const 56)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 68)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 72)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 76)
;; CHECK-NEXT:   (i32.const 68)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 80)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 84)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 88)
;; CHECK-NEXT:   (i32.const 80)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 92)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 96)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 100)
;; CHECK-NEXT:   (i32.const 92)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 104)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 108)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 112)
;; CHECK-NEXT:   (i32.const 104)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 116)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 120)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 124)
;; CHECK-NEXT:   (i32.const 116)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 128)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 132)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 136)
;; CHECK-NEXT:   (i32.const 128)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 140)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 144)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 148)
;; CHECK-NEXT:   (i32.const 140)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 152)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 156)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 160)
;; CHECK-NEXT:   (i32.const 152)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 164)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 168)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 172)
;; CHECK-NEXT:   (i32.const 164)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 176)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 180)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 184)
;; CHECK-NEXT:   (i32.const 176)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 188)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 192)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 196)
;; CHECK-NEXT:   (i32.const 188)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 200)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 204)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 208)
;; CHECK-NEXT:   (i32.const 200)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 212)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 216)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 220)
;; CHECK-NEXT:   (i32.const 212)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 224)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 228)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 232)
;; CHECK-NEXT:   (i32.const 224)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 236)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 240)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 244)
;; CHECK-NEXT:   (i32.const 236)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 248)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 252)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 256)
;; CHECK-NEXT:   (i32.const 248)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 260)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 264)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 268)
;; CHECK-NEXT:   (i32.const 260)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 272)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 276)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 280)
;; CHECK-NEXT:   (i32.const 272)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 284)
;; CHECK-NEXT:   (i32.const 20)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 288)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 292)
;; CHECK-NEXT:   (i32.const 248)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 296)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 300)
;; CHECK-NEXT:   (i32.const 20)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 304)
;; CHECK-NEXT:   (i32.const 2)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 308)
;; CHECK-NEXT:   (i32.const 44)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 312)
;; CHECK-NEXT:   (i32.const 3)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (global.set $global1
;; CHECK-NEXT:   (call $RttSub
;; CHECK-NEXT:    (i32.const 32)
;; CHECK-NEXT:    (global.get $global0)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (global.set $global2
;; CHECK-NEXT:   (call $RttSub
;; CHECK-NEXT:    (i32.const 140)
;; CHECK-NEXT:    (global.get $global1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (global.set $global3
;; CHECK-NEXT:   (call $RttSub
;; CHECK-NEXT:    (i32.const 140)
;; CHECK-NEXT:    (global.get $global2)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $CallRef$type$0 (param $0 i32)
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.eqz
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (unreachable)
;; CHECK-NEXT:   (call_indirect $lowergc-table (type $type$0)
;; CHECK-NEXT:    (i32.load offset=4
;; CHECK-NEXT:     (local.get $0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $CallRef$type$7 (param $0 i64) (param $1 i32)
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.eqz
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (unreachable)
;; CHECK-NEXT:   (call_indirect $lowergc-table (type $type$7)
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (i32.load offset=4
;; CHECK-NEXT:     (local.get $1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $RefAsNonNull (param $0 i32) (result i32)
;; CHECK-NEXT:  (if (result i32)
;; CHECK-NEXT:   (i32.eqz
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (unreachable)
;; CHECK-NEXT:   (local.get $0)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $RefAsData (param $0 i32) (result i32)
;; CHECK-NEXT:  (if (result i32)
;; CHECK-NEXT:   (i32.eqz
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (unreachable)
;; CHECK-NEXT:   (block (result i32)
;; CHECK-NEXT:    (if
;; CHECK-NEXT:     (i32.ne
;; CHECK-NEXT:      (i32.load
;; CHECK-NEXT:       (i32.load
;; CHECK-NEXT:        (local.get $0)
;; CHECK-NEXT:       )
;; CHECK-NEXT:      )
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (unreachable)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $RttSub (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local $4 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.load offset=4
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (call $malloc
;; CHECK-NEXT:    (i32.add
;; CHECK-NEXT:     (i32.mul
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.const 12)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:   (i32.load
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store offset=4
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (local.set $4
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (loop $loop
;; CHECK-NEXT:   (i32.store offset=8
;; CHECK-NEXT:    (local.get $4)
;; CHECK-NEXT:    (i32.load offset=8
;; CHECK-NEXT:     (local.get $1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (local.set $4
;; CHECK-NEXT:    (i32.add
;; CHECK-NEXT:     (local.get $4)
;; CHECK-NEXT:     (i32.const 4)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (local.set $1
;; CHECK-NEXT:    (i32.add
;; CHECK-NEXT:     (local.get $1)
;; CHECK-NEXT:     (i32.const 4)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (local.set $3
;; CHECK-NEXT:    (i32.sub
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (br_if $loop
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store offset=8
;; CHECK-NEXT:   (local.get $4)
;; CHECK-NEXT:   (local.get $0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (local.get $2)
;; CHECK-NEXT: )

;; CHECK:      (func $malloc (param $0 i32) (result i32)
;; CHECK-NEXT:  (global.set $lowergc-next-malloc
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (global.get $lowergc-next-malloc)
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.ge_u
;; CHECK-NEXT:    (global.get $lowergc-next-malloc)
;; CHECK-NEXT:    (i32.mul
;; CHECK-NEXT:     (memory.size)
;; CHECK-NEXT:     (i32.const 65536)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (unreachable)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.sub
;; CHECK-NEXT:   (global.get $lowergc-next-malloc)
;; CHECK-NEXT:   (local.get $0)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )
(module ;; If a memory already exists, we should append to it. The total memory
        ;; size should increase, and malloc should start from the new part.
 ;; CHECK:      (type $type$0 (func))

 ;; CHECK:      (type $i32_=>_i32 (func (param i32) (result i32)))

 ;; CHECK:      (global $lowergc-next-malloc (mut i32) (i32.const 65560))

 ;; CHECK:      (memory $0 16385 16385)
 (memory $0 1 1)
 (type $empty (struct))

 (func "new-struct"
  (drop
   (struct.new_with_rtt $empty
    (rtt.canon $empty)
   )
  )
 )
)
;; CHECK:      (export "new-struct" (func $0))

;; CHECK:      (start $lowergc-start)

;; CHECK:      (func $0
;; CHECK-NEXT:  (drop
;; CHECK-NEXT:   (call $StructNewWithDefault$empty
;; CHECK-NEXT:    (i32.const 65548)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $lowergc-start
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 65536)
;; CHECK-NEXT:   (i32.const 0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 65540)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 65544)
;; CHECK-NEXT:   (i32.const 65536)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 65548)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 65552)
;; CHECK-NEXT:   (i32.const 1)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (i32.const 65556)
;; CHECK-NEXT:   (i32.const 65548)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $StructNewWithDefault$empty (param $0 i32) (result i32)
;; CHECK-NEXT:  (local $1 i32)
;; CHECK-NEXT:  (local.set $1
;; CHECK-NEXT:   (call $malloc
;; CHECK-NEXT:    (i32.const 4)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (local.get $1)
;; CHECK-NEXT:   (local.get $0)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (local.get $1)
;; CHECK-NEXT: )

;; CHECK:      (func $malloc (param $0 i32) (result i32)
;; CHECK-NEXT:  (global.set $lowergc-next-malloc
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (global.get $lowergc-next-malloc)
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.ge_u
;; CHECK-NEXT:    (global.get $lowergc-next-malloc)
;; CHECK-NEXT:    (i32.mul
;; CHECK-NEXT:     (memory.size)
;; CHECK-NEXT:     (i32.const 65536)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (unreachable)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.sub
;; CHECK-NEXT:   (global.get $lowergc-next-malloc)
;; CHECK-NEXT:   (local.get $0)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )
(module) ;; We should not crash on an empty module.
;; CHECK:      (type $none_=>_none (func))

;; CHECK:      (start $lowergc-start)

;; CHECK:      (func $lowergc-start
;; CHECK-NEXT: )
